# user is set via ~/.config/bash/.exports
# there we export GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL
# and GIT_COMMITTER_NAME and GIT_COMMITTER_EMAIL

[alias]
	# View the SHA, description, and history graph of the latest 100 commits
	l = log --pretty=oneline --graph -n 100

	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

	# View the current working tree status using the short format
	s = status -s

	# Short status output (output like svn st)
	st = status -sb

	# Diff
	d = diff --patch-with-stat

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a -v
	remotes = remote -v

	# Undo a `git push`
	undopush = push -f origin HEAD^:master

	up = !git pull --rebase

	please = push --force-with-lease
	commend = commit --amend --no-edit

	# from: https://gist.github.com/robmiller/6018582
	# Delete any branches that have been merged into master
	# See also: https://gist.github.com/robmiller/5133264
	delete-merged-branches = "!git branch --merged origin/master | grep -v 'master$' | xargs git branch -d"

	# Given a merge commit, find the span of commits that exist(ed) on that
	# branch. Again, not so useful in itself, but used by other aliases.
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

	# Find the commits that were introduced by a merge
	merge-log = "!git log `git merge-span .. $1`"
	# Show the changes that were introduced by a merge
	merge-diff = "!git diff `git merge-span ... $1`"
	# As above, but in your difftool
	merge-difftool = "!git difftool `git merge-span ... $1`"

	# Interactively rebase all the commits on the current branch
	rebase-branch = "!git rebase -i `git merge-base master HEAD`"

[apply]
	# Detect whitespace errors when applying a patch
	# whitespace = fix

[core]
	editor = vim

	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	# whitespace = space-before-tab,indent-with-non-tab,trailing-space

	quotepath = false

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow
	frag = magenta bold
	old = red bold
	new = green bold
	commit = yellow bold
	whitespace = red reverse

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[github]
    user = schmkr

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[branch]
	autosetuprebase = always
	autosetupmerge = always

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

[push]
	default = current

[rerere]
	enabled = true

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

[pager]
	diff = diff-so-fancy | less --tabs=1,5 -RFX
	show = diff-so-fancy | less --tabs=1,5 -RFX

[pull]
	ff = only

[user]
	useconfigonly = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[advice]
	ignoredHook = false
[diff]
	colorMoved = dimmed_zebra
